pageinfo = [[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null],
	[0,0,0,0,null]];
pagedata = [ ["./128-bit-float.html","Appendix &#62; Class Dictionary &#62; ASA Emulator Data Types &#62; 128-bit Floating Point: dt_tfloat (T_Float, Quad Precision)","The dt_tfloat class encapsulates the 128-bit Alpha T_Float format as two 64-bit words (m_high, m_low). It provides explicit creation and conversio...",""],
["./128-bit-integer-datatypes.html","Appendix &#62; Class Dictionary &#62; ASA Emulator Data Types &#62; 128-bit Integer: dt_int128","A. 128-bit Integer: dt_int128 -----------------------------  The `dt_int128` class provides an explicit, architecture-neutral signed 128-bit ...",""],
["./64-bit-floating-point.html","Appendix &#62; Class Dictionary &#62; ASA Emulator Data Types &#62; 64-bit Floating Point: dt_gfloat (VAX G_Float) and dt_float (Unified)","64-bit Floating Point: dt_gfloat (VAX G_Float) and dt_float (Unified)",""],
["./about-mmu-and-tlb.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Virtual Address Space — Overview &#62; Memory Management &#62; About MMU and TLB — Definitions &#38; Roles","MMU — Memory Management Unit ----------------------------------------------------------------------------- The **Memory Management Unit (MMU)** is...",""],
["./addresstranslation.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Virtual Address Space — Overview &#62; Address Translation (va &#60;-&#62; pa)","Virtual-to-Physical Address Translation in Alpha Architecture",""],
["./alpha-registers.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Alpha AXP Register Architecture (Modernized for Unified/128-bit Emulator Design)","The objective of this documentation is to provide a \"single source of truth\" with respect to Alpha, Tru64, Unix, VAX registers and their...",""],
["./alpha-system-architecture-form.html","Alpha System Architecture Format Reference","LDQ    LDQ  Ra.wq, disp.ab(Rb.ab)  ! Memory Format",""],
["./alpha-tlb-conflict-todo.html","Appendix &#62; Class Dictionary &#62; AlphaMemorySystem &#62; Implementation &#62; Page Table  &#62; Alpha TLB Conflict Todo","tlbCollisionDetector Collision Detection: Monitors up to 4 concurrent operations and detects when they target the same TB index Priority Managemen...",""],
["./alphaconsoleshell-classdictionary.html","Appendix &#62; Class Dictionary &#62; AlphaConsoleShell","ConsoleShell handles all SRM/console user interaction (command parsing, environment variables, command help, output formatting).",""],
["./alphacpu-claude.html","Appendix &#62; Class Dictionary &#62; AlphaCPU","The ASA-Alpha - AlphaCPU:: represents one virtual CPU core in the Alpha AXP emulator. It models the execution of instructions, manages per-core st...",""],
["./alphacpu-subsystem.html","Introduction &#62; Subsystems/Components API &#62; AlphaCPU","The AlphaCPU class models the execution engine of one Alpha processor. It maintains the program counter, fetches instructions, dispatches them to",""],
["./alphacpuloghandler-classdictionary.html","Appendix &#62; Class Dictionary &#62; AlphaCPULogHandler","Logging is handled as \"slow\", \"fast\" &#38; fastest. For legacy code: (QString::arg(), QString / std::sprintf, and std::sprintf...",""],
["./alphacpustate-alphacpu.html","Appendix &#62; Class Dictionary &#62; AlphaCPU &#62; AlphaCPUState","AlphaCPUState Navigation: Appendix Class Dictionary AlphaCPU AlphaCPUState ",""],
["./alphainstructioncache.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Virtual Address Space — Overview &#62; Memory Management &#62; Caching &#62; AlphaInstructionCache","UnifiedDataCache  AlphaCPU   ↓ PC → UnifiedDataCache::read()       → hit? return       → miss → fallback →...",""],
["./alphainstructiongrain-class-dictionary.html","Appendix &#62; Class Dictionary &#62; AlphaInstructionGrain","Each grain acts as a singleton handler for its instruction and represents a single Alpha AXP instruction — with full semantic behavior.",""],
["./alphamemorysystem-claude.html","Appendix &#62; Class Dictionary &#62; AlphaMemorySystem","The Alpha Memory System is the interface between physical address space and the MMIO (interfaces to devices, storage etc.). The AlphaMemorySystem ...",""],
["./alphamemorysystem-subsystem.html","Introduction &#62; Subsystems/Components API &#62; AlphaMemorySystem","The AlphaMemorySystem builds on SafeMemory to provide full architectural support for address translation and access control. It mirrors the Alpha ...",""],
["./alphaprocessorcontext-alphacpu.html","Appendix &#62; Class Dictionary &#62; AlphaCPU &#62; AlphaProcessorContext","===============================================================================",""],
["./alphaprocessorcontext-library.html","Appendix &#62; Class Dictionary &#62; AlphaProcessorContext","Is responsible for the context of the processor including: ",""],
["./alphaprocessorcontext-subsystem.html","Introduction &#62; Subsystems/Components API &#62; AlphaProcessorContext","The AlphaProcessorContext represents the per-CPU architectural state. It encapsulates all registers, flags, and mode information required to execu...",""],
["./alphasmpmanager-claude.html","Appendix &#62; Class Dictionary &#62; AlphaSMPManager","In an ASA-Alpha emulator (and in the real hardware), SMP stands for Symmetric Multiprocessing, and the AlphaSMPManager is the component responsibl...",""],
["./alphatelnetconsoleserver-class-dictionary.html","Appendix &#62; Class Dictionary &#62; AlphaTelnetConsoleServer","The AlphaTelnetConsoleServer header above is a complete, robust, and extensible foundation for a multi-client Telnet/VT console for your Alpha/VAX...",""],
["./alpha_fp_divzero_check---divid.html","Appendix &#62; Macro and Header &#62; Exception Source BitMask Macros &#62; ALPHA_FP_DIVZERO_CHECK - Divide By Zero Check","This macro performs a divide by zero check.   ONLY check the denominator (srcB) for zero. The macro should trap only if srcB == 0.0, which is...",""],
["./alpha_fp_masked_invalidop_chec.html","Appendix &#62; Macro and Header &#62; Exception Source BitMask Macros &#62; ALPHA_FP_MASKED_INVALIDOP_CHECK - Invalid Operation Check","Typical Macro Usage for Invalid Operation Checks  In most implementations, this macro is intended to check all operands (A, B, possibly C) fo...",""],
["./architecture-guide-exceptions-interrupts-machinechecks.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Exceptions, Faults, Interrupts, and MachineChecks &#62; Architecture-Guide","1. Exception Types &#38; Classification  Synchronous (Exceptions): Caused directly by the current instruction (e.g., arithmetic overflow, acc...",""],
["./architecture-registers-claude.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Virtual Address Space — Overview &#62; Architecture Registers","Reference:  Frame Pointer Process Status Register-PSR ASA-EMulatR Initialization Registers (Alpha)",""],
["./architecture.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR","The ASA architecture comprises, or will comprise of the following architecture systems. ",""],
["./asa-emulator-data-types.html","Appendix &#62; Class Dictionary &#62; ASA Emulator Data Types","Platform/OS Type Name Canonical Type / Class Bit Width Class Name IEEE Equivalent Description VAX VAX F_floating F_floating / dt_ffloat 32 dt_fflo...",""],
["./asa-emulator-implementation.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Exceptions, Faults, Interrupts, and MachineChecks &#62; Machine Check Handling and Machine Check Frame &#62; ASA Emulator Implementation","The machine check frame is implemented using the  HWStackFrame structure (HWFrameStack.h). This struct captures all relevant architectural st...",""],
["./asa-emulator-initialization.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; ASA Emulator Initialization","Step Action 1 SystemLoader loads system parameters from JSON config 2 Calls AlphaSMPManager::configureSystem(cpuCount, memoryMB, startPC) 3 AlphaS...",""],
["./asa-performance-montor.html","Appendix &#62; ASA Performance Montor","===============================================================================",""],
["./boot-commands-srm.html","Appendix &#62; SRM Console Commands &#62; Commands &#62; BOOT","Boots the supported operating systems and the emulated - Loadable Firmware Update (LFU) utility.",""],
["./bus-virtualhardware.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Hardware - Virtualized &#62; Devices &#38; Interfaces &#62; Physical Hardware Model &#62; Bus","Enter topic text here.",""],
["./businterface-classdictionary.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Hardware - Virtualized &#62; Devices &#38; Interfaces &#62; Logical Hardware Model &#62; BusInterface","Is an abstract interface for any device or bus that needs to participate in:",""],
["./cabinet-virtualhardware.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Hardware - Virtualized &#62; Devices &#38; Interfaces &#62; Physical Hardware Model &#62; Cabinet","Enter topic text here.",""],
["./cache-policies.html","Appendix &#62; Class Dictionary &#62; AlphaCPU &#62; Cache Policies in ASA Alpha Emulator","The ASA-EMulatR implements configurable cache hierarchies that model the real Alpha AXP processors, including L1, L2, and optionally L3 caches.",""],
["./caching---instruction.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Virtual Address Space — Overview &#62; Memory Management &#62; Caching","The cache hierarchy can dramatically improve performance by reducing memory access latency. ",""],
["./caching-code.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Virtual Address Space — Overview &#62; Memory Management &#62; Caching &#62; Caching-Code","/* ALPHA AXP CACHE ARCHITECTURE ANALYSIS =====================================  ACTUAL ALPHA CACHE HIERARCHY: CPU Pipeline: ├── L1 I-Cache (I...",""],
["./canonical-register-definitions-alphaaxpregister.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Alpha AXP Register Architecture (Modernized for Unified/128-bit Emulator Design) &#62; Registers Defined — Canonical Register and Bitfield Enumeration","This section documents the full set of architectural and internal registers implemented in the ASA-EMulatR, including all standard Alpha AXP integ...",""],
["./canonical-trap-handling.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Exceptions, Faults, Interrupts, and MachineChecks &#62; Trap Handling","This page documents the three canonical patterns for delivering floating-point exceptions and traps in the ASA-EMulatR, as required by the Alpha A...",""],
["./cipca-systembus.html","Appendix &#62; Class Dictionary &#62; SystemBus &#62; CIPCA","Enter topic text here.",""],
["./cixcd-systembus.html","Appendix &#62; Class Dictionary &#62; SystemBus &#62; CIXCD","Enter topic text here.",""],
["./clear-commands-srmconsole.html","Appendix &#62; SRM Console Commands &#62; Commands &#62; Clear","Clears the SRM password or an environment variable. ",""],
["./code-3.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Virtual Address Space — Overview &#62; Memory Management &#62; Caching &#62; Code-3","// ========== TLB + CACHE INTERACTION DIAGRAM ==========",""],
["./code-standards-and-conventions.html","Appendix &#62; Code Standards and Conventions","Enter topic text here.",""],
["./commands.html","Appendix &#62; SRM Console Commands &#62; Commands","The following SRM Console commands are supported in ASA Virtual Emulator. ",""],
["./compiler-options.html","Appendix &#62; Visual Studio 2022 - Community &#62; Compiler Options","Option Description /Bt+  Performance Metrics. Precompile and Compile /FAs Produce an assembler listing file with source code as comments. /FA...",""],
["./configuration-subsystem.html","Introduction &#62; Subsystems/Components API &#62; Configuration ","The Configuration subsystem provides a JSON/INI-based mechanism for defining system parameters, devices, and memory layout. It ensures that the em...",""],
["./configuration-user-guide.html","Introduction &#62; System Configuration &#62; Configuration Guide","The ASA is expected to be highly configurable.  Configuration settings will be configured in a .INI file and at run-time boot-load, all devic...",""],
["./configuration_loadfile.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Hardware - Virtualized &#62; Devices &#38; Interfaces &#62; SCSI Device Integration &#62; Configuration_loadFile TODO","// SCSI Configuration System #pragma once  #include &#60;QSettings&#62; #include &#60;QJsonDocument&#62; #include &#60;QJsonObject&#62; #include &#38;l...",""],
["./continue-commands-srmconsole.html","Appendix &#62; SRM Console Commands &#62; Commands &#62; Continue","For OpenVMS systems, the continue command resumes processing at the point where it was interrupted by a Ctrl/P at the console terminal, by the Hal...",""],
["./coverage-tlbsystem.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Virtual Address Space — Overview &#62; Memory Management &#62; Coverage","Function Name CPU Physical Addr (PA) Virtual Addr (VA) ASN IsPending PTE I-TLB D-TLB Range/Size Notes / Description invalidateAllTLBs_PTE X  ...",""],
["./crash-commands-srmconsole.html","Appendix &#62; SRM Console Commands &#62; Commands &#62; Crash","Causes the operating system to be restarted and generates a memory dump.",""],
["./csr-commands-srmconsole.html","Appendix &#62; SRM Console Commands &#62; Commands &#62; CSR","Displays the contents of the system’s control and status registers (CSRs). If a hex data value is specified, the command deposits to the specified...",""],
["./datatype-considerations.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; DataType Considerations","The ASA-EMulatR uses specialized floating-point classes to accurately represent all Alpha/VAX floating-point formats and provide safe conversions ...",""],
["./defaa-systembus.html","Appendix &#62; Class Dictionary &#62; SystemBus &#62; DEFAA","Enter topic text here.",""],
["./defea-systembus.html","Appendix &#62; Class Dictionary &#62; SystemBus &#62; DEFEA","Enter topic text here.",""],
["./defpa-systembus.html","Appendix &#62; Class Dictionary &#62; SystemBus &#62; DEFPA-SystemBus","Enter topic text here.",""],
["./demfa-systembus.html","Appendix &#62; Class Dictionary &#62; SystemBus &#62; DEMFA","Enter topic text here.",""],
["./demna-systembus.html","Appendix &#62; Class Dictionary &#62; SystemBus &#62; DEMNA","Enter topic text here.",""],
["./developmentprioritiesandroadmap.html","Introduction &#62; Development Priorities and Roadmap","The ASA-EMulatR is a work-in-progress with a rigorous focus on both architectural accuracy and host performance. The following prioritized task li...",""],
["./device-assignments.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Hardware - Virtualized &#62; Devices &#38; Interfaces &#62; Device Assignments","For Device: dqa0.0.0.15.0 (IDE disk, PCI bus 15, function 0):",""],
["./devicemanager-classdictionary.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Hardware - Virtualized &#62; Devices &#38; Interfaces &#62; Logical Hardware Model &#62; DeviceManager","Is a global registry, factory, and orchestrator for all devices (not just physical, but logical too: virtual devices, pseudo-devices, buses, bridg...",""],
["./devices--interfaces.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Hardware - Virtualized &#62; Devices &#38; Interfaces","Enter topic text here.",""],
["./devices-claude.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Hardware - Virtualized &#62; Devices","The application stack will support this hierarchical device structure. ",""],
["./drawer-virtualdevices.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Hardware - Virtualized &#62; Devices &#38; Interfaces &#62; Physical Hardware Model &#62; Drawer","Enter topic text here.",""],
["./dt_dfloat--vax-d_floating-form.html","Appendix &#62; Class Dictionary &#62; ASA Emulator Data Types &#62; dt_dfloat -VAX D_floating format (64-bit, bias 128, 55-bit fraction)","VAX D_floating (double precision, 64 bits) suitable for Alpha and VAX emulation, architecturally faithful to VAX and Alpha bit layouts.",""],
["./dt_ffloat_classdictionary.html","Appendix &#62; Class Dictionary &#62; ASA Emulator Data Types &#62; dt_ffloat -Alpha/VAX F_floating &#60;-&#62; Alpha G_floating Canonical Conversion","Alpha/VAX F_floating &#60;-&#62; Alpha G_floating Canonical Conversion",""],
["./dt_gfloat.html","Appendix &#62; Class Dictionary &#62; ASA Emulator Data Types &#62; dt_gfloat — VAX G_Float (64-bit floating-point)","dt_gfloat is a C++ class modeling the VAX G_Float format—a 64-bit floating-point representation used in VAX and supported for compatibility in Alp...",""],
["./dt_sfloat.html","Appendix &#62; Class Dictionary &#62; ASA Emulator Data Types &#62; dt_sfloat - Alpha 754 single-precision / Alpha S_floating (32-bit) format","The dt_sfloat class conforms to IEEE 754 single-precision / Alpha S_floating (32-bit) format, designed to match your dt_ffloat, dt_gfloat, etc.",""],
["./dt_tfloat2-asaemulatordatatypes.html","Appendix &#62; Class Dictionary &#62; ASA Emulator Data Types &#62; dt_tfloat — Alpha T_Float (128-bit Quad-Precision)","A robust, nearly ready for production, strict IEEE conformance, clarity, and edge-case handling.  The dt_tfloat implements the Alpha AXP T_Fl...",""],
["./emulated-hardware.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Hardware - Virtualized","Device Family Description Tulip DC21040   Q-Logic",""],
["./emulatormanager-claude.html","Appendix &#62; Class Dictionary &#62; ASAEmulator","This is the top-level application executable.",""],
["./ev6-tsunami-mmiomanager.html","Appendix &#62; Class Dictionary &#62; AlphaMemorySystem &#62; MMIOManager (MMIO) &#62; Memory Boundaries &#62; EV6-Tsunami","EV6/EV67/EV68 (Tsunami) and EV7 (Marvel) maps are larger.",""],
["./ev7-marvin-memoryboundaries.html","Appendix &#62; Class Dictionary &#62; AlphaMemorySystem &#62; MMIOManager (MMIO) &#62; Memory Boundaries &#62; EV7-Marvin","This is documented, but is not implemented.   EV7 (21364 + &#8220;Marvel&#8221; on-chip cross-bar &#38; IO7 ASIC) EV7 pulls the memory controller onto th...",""],
["./exception-frame_exceptionsinterruptsmachinechecks.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Exceptions, Faults, Interrupts, and MachineChecks &#62; Exception Frame","This page describes the architectural requirements and emulator implementation for frame fields, register storage, processor mode, and stack point...",""],
["./exception-handling-reference.html","Appendix &#62; Alpha/VAX Floating-Point Exception Handling: Status and Trap Model Reference","Alpha/VAX Floating-Point Exception Handling: Status and Trap Model Reference",""],
["./exception-processing-alphacpu.html","Appendix &#62; Class Dictionary &#62; AlphaCPU &#62; Exception Processing","It provides a foundation for implementing complex SMP behaviors like TLB shootdowns, scheduler load balancing, and other coordination tasks betwee...",""],
["./exception-source-bitmask-macro.html","Appendix &#62; Macro and Header &#62; Exception Source BitMask Macros","Constructs a bitmask indicating which operand register(s) were the source of an exception",""],
["./exception-source-bitmask-maski.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Exceptions, Faults, Interrupts, and MachineChecks &#62; Exception Source Bitmask Masking","This covers all typical unary, binary, and ternary (FMA, etc.) grains used in Alpha AXP floating-point, following architectural conventions.",""],
["./exceptions-alphacpu.html","Appendix &#62; Class Dictionary &#62; AlphaCPU &#62; Exceptions","See Also.  OptimizedExceptionStatusRegister",""],
["./exceptionsinterruptsandmachinechecks.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Exceptions, Faults, Interrupts, and MachineChecks","The ASA-EMulatR implements a full architectural model for exceptions, interrupts, and machine checks, faithfully mirroring the Alpha AXP and VAX h...",""],
["./exceptionstatusregister-classlibrary.html","Appendix &#62; Class Dictionary &#62; ExceptionStatusRegister","AlphaCPU owns and orchestrates instruction execution, traps, pipeline flow, and all architectural side effects.",""],
["./execution-stack-breakdown-for-.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Instruction Grains &#62; Instruction Grain Data Flow — Overview &#62; Grain Execution - Store Instruction","This section documents the control and data flow for store instruction grains (such as STT_InstructionGrain::execute()) in the Alpha AXP emulator.",""],
["./fca-2354-systembus.html","Appendix &#62; Class Dictionary &#62; SystemBus &#62; FCA-2354","Enter topic text here.",""],
["./firmware-(srm-ev59)---es40.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Firmware (SRM EV59) - ES40","Device Current Revision Filename Update Revision Abios v5.71 abios_fw v5.71 SRM v6.8-xx srm67_fw v6.8-xx pga0 DS3.82A1 kgpsa_8k_fw DS3.91A1 pgb0 S...",""],
["./firmware-.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Firmware (SRM EV59) - ES40 &#62; Firmware: ","Required Files for the Alpha Emulator (ASA) Here’s how the files you found break down and what the ES40-class emulator actually needs.  File ...",""],
["./floating-point-control-registe.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Floating-Point Control Register (FPCR)","The Floating Point Control Register (FPCR)  is a central architectural register on Alpha AXP systems, controlling all floating-point exceptio...",""],
["./fpcrregister-classdictionary.html","Appendix &#62; Class Dictionary &#62; FpcrRegister","Enter topic text here.",""],
["./frame-pointer-claude.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Virtual Address Space — Overview &#62; Architecture Registers &#62; Frame Pointer","Project References:  AlphaCPU::stackFrame::framePointer  Usage:   Holds the base address of the current stack frame (in function/pr...",""],
["./frameworks.html","Frameworks","Enter topic text here.",""],
["./globallocktracker-alphasmpmanager.html","Appendix &#62; Class Dictionary &#62; AlphaSMPManager &#62; GlobalLockTracker","Use of GlobalLockTracker &#38; CPU invalidations  LDx_L/STx_C semantics  The Alpha architecture guarantees that if CPUA does an LDQ_L ad...",""],
["./glossary.html","Appendix &#62; Glossary","MMU determines the translation modes that will be enable.   Virtual -&#62; physical translation via AlphaMemorySystem Uses flat 1:1 physical m...",""],
["./grain-default-behavior.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Instruction Grains &#62; Alpha AXP Instruction Qualifier Suffixes &#62; Grain Default Behavior","When no qualifier is specified on an Alpha floating-point instruction, the default behavior is:",""],
["./grain-exception-fixups.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Instruction Grains &#62; Alpha AXP Instruction Qualifier Suffixes &#62; Grain Exception Fixups","The Alpha architecture supports both hardware and software fixups, but they work in different ways:",""],
["./grain-qualifiers---saturate.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Instruction Grains &#62; Alpha AXP Instruction Qualifier Suffixes &#62; Grain Qualifiers - Saturate","This page documents the trap models and exception checking logic for all floating-point arithmetic instructions in the ASA-EMulatR. The Alpha arch...",""],
["./grainresolver-classdictionary.html","Appendix &#62; Class Dictionary &#62; GrainResolver","===============================================================================",""],
["./halt-commands-srmconsole.html","Appendix &#62; SRM Console Commands &#62; Commands &#62; Halt","Halts the specified processor or device. Equivalent to the stop command.",""],
["./help-commands-srmconsole.html","Appendix &#62; SRM Console Commands &#62; Commands &#62; Help","Provides basic information on the console commands.",""],
["./hwstackframe-classdictionary.html","Appendix &#62; Class Dictionary &#62; HWStackFrame","Enter topic text here.",""],
["./implementation-alphamemorysystem.html","Appendix &#62; Class Dictionary &#62; AlphaMemorySystem &#62; Implementation","# AlphaMemorySystem Architecture Documentation  ## Table of Contents  1. [Overview](#overview) 2. [System Architecture](#system-architec...",""],
["./init-commands-srmconsole.html","Appendix &#62; SRM Console Commands &#62; Commands &#62; Init","Resets the SRM console firmware, incorporating any changes made to environment variables during the foregoing console session, and reinitializes t...",""],
["./instruction-grain.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Instruction Grains","The AlphaInstructionGrain is the fundamental building block of the ASA-EMulatR’s instruction execution model. It provides a lightweight, stateless...",""],
["./instruction-memory-barriers.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Memory Barrier Instructions — Overview and Integration","This section documents the Alpha AXP memory barrier instructions and their correct integration in the emulator’s execution core. Memory barrier in...",""],
["./instruction-stack-exection.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Instruction Grains &#62; Instruction Grain Data Flow — Overview &#62; Grain Execution - Load Instruction","This section describes the complete data and control flow for a memory access instruction grain (such as LDT_InstructionGrain::execute()) in the A...",""],
["./instruction-tlb-pagetable.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Virtual Address Space — Overview &#62; Memory Management &#62; Page Table Support &#62; Invalidation  &#62; Instruction TLB","Instruction TLB Navigation: Introduction Platform Architectures Alpha on ASA-EmulatR Virtual Address Space — Overview Memory Management Page Table...",""],
["./instructions-introduction.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Instruction Grains &#62; Instruction Grain Data Flow — Overview","Instruction grains are the fundamental execution units in the ASA-EMulatR, providing a modular, stateless, and architecture-faithful implementatio...",""],
["./integration-(fdew)-.html","Appendix &#62; Class Dictionary &#62; AlphaCPU &#62; Integration (FDEWI) ","This topic describes the integration aspects of the AlphaCPU via the AlphaSMPManager.",""],
["./interfaces-alphacpu.html","Appendix &#62; Class Dictionary &#62; AlphaCPU &#62; Interfaces","AlphaSMPManager    AlphaMemorySystem getAllCPUs() returns -&#62; QVector&#60;CPURegistryEntry&#62; alphaCPU(quint16) returns -&#62; AlphaCPU...",""],
["./interrupt-levels---vax.html","Introduction &#62; Platform Architectures &#62; VAX on ASA-EmulatR &#62; VAX Architecture — Exceptions, Interrupts, and Machine Checks &#62;   VAX Interrupt Priority Level (IPL) — Introduction","The VAX Interrupt Priority Level (IPL) is a 6-bit field (values 0–63) that plays a central role in both hardware and software interrupt arbitratio...",""],
["./interrupt-levels-.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Exceptions, Faults, Interrupts, and MachineChecks &#62; Alpha AXP Interrupt Priority Level (IPL) — Introduction","The Interrupt Priority Level (IPL) field on Alpha AXP systems is a 5-bit architectural value (bits 7:3 in the Processor Status register) that dete...",""],
["./interrupts-exceptions-faults-machinechecks.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Exceptions, Faults, Interrupts, and MachineChecks &#62; Interrupts","Alpha AXP interrupt classes by type and their assigned IPLs (Interrupt Priority Levels). The official IPL values are mostly in the range 1–31, but...",""],
["./introduction.html","Introduction","About this Effort  This project has been on my wish list for more than 20 years. During that time, I was fully engaged in earning a living an...",""],
["./invalidation-pagetable.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Virtual Address Space — Overview &#62; Memory Management &#62; Page Table Support &#62; Invalidation ","Functions CPU PA VA ASN IsPending PTE I-TLB D-TLB Range Size in page invalidateAllTLBs_PTE invalidateAllTLBs_PTE x     x    in...",""],
["./iodrawer-virtualdevices.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Hardware - Virtualized &#62; Devices &#38; Interfaces &#62; Physical Hardware Model &#62; IODrawer","Enter topic text here.",""],
["./iohose-virtualhardware.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Hardware - Virtualized &#62; Devices &#38; Interfaces &#62; Physical Hardware Model &#62; IOHose","Enter topic text here.",""],
["./ipi-stack-documentation.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Symmetric Multi-Processing &#62; Interprocessor Interrupt (IPI) Stack Design","�� Alpha Emulator — Interprocessor Interrupt (IPI) Stack Design",""],
["./iprbank-classdictionary.html","Appendix &#62; Class Dictionary &#62; IprBank","Enter topic text here.",""],
["./iprbank-registers.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Symmetric Multi-Processing &#62; Internal Processor Register (IPR) Bank","Alpha Emulator — Internal Processor Register (IPR) Bank Documentation",""],
["./irq-assignments.html","Appendix &#62; IRQ Assignments","Typical IRQ Assignments for Alpha PCI Devices Below are values commonly found on Alpha systems (e.g., ES40, DS20, GS1280).  Note: Actual valu...",""],
["./isp10x0-systembus.html","Appendix &#62; Class Dictionary &#62; SystemBus &#62; ISP10X0","Enter topic text here.",""],
["./kcm44-systembus.html","Appendix &#62; Class Dictionary &#62; SystemBus &#62; KCM44","Enter topic text here.",""],
["./kdm70-systembus.html","Appendix &#62; Class Dictionary &#62; SystemBus &#62; KDM70","Enter topic text here.",""],
["./kfmsb-b01-gt-systembus.html","Appendix &#62; Class Dictionary &#62; SystemBus &#62; KFMSB-B01-GT","Enter topic text here.",""],
["./kfmsb-b01-systembus.html","Appendix &#62; Class Dictionary &#62; SystemBus &#62; KFMSB-B01","Enter topic text here.",""],
["./kgpsa-bc-systembus.html","Appendix &#62; Class Dictionary &#62; SystemBus &#62; KGPSA-BC","Enter topic text here.",""],
["./kgpsa-ca-systembus.html","Appendix &#62; Class Dictionary &#62; SystemBus &#62; KGPSA-CA","Enter topic text here.",""],
["./kzmsa-systembus.html","Appendix &#62; Class Dictionary &#62; SystemBus &#62; KZMSA","Enter topic text here.",""],
["./kzpsa-systembus.html","Appendix &#62; Class Dictionary &#62; SystemBus &#62; KZPSA-SystemBus","Enter topic text here.",""],
["./l1cache.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Virtual Address Space — Overview &#62; Memory Management &#62; Caching &#62; L1 I-Cache","L1 I-Cache: 32KB, 64-byte lines, 2-way associative (simplified as direct-mapped here)",""],
["./l2cache.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Virtual Address Space — Overview &#62; Memory Management &#62; Caching &#62; L2 D-Cache","// L2 Unified Cache: 1MB, 64-byte lines Serves as the backing-cache-store for Execute unit operations.   EXECUTE CHARACTERISTICS:   &#38;nbs...",""],
["./l3-shared-(smp)-unifiedcache.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Virtual Address Space — Overview &#62; Memory Management &#62; Caching &#62; L3 Shared (SMP) UnifiedCache","Enter topic text here.",""],
["./length-of-access.html","Appendix &#62; Table of Definitons &#62; Length-of-Access","Length-of-Access Navigation: Appendix Table of Definitons Length-of-Access ",""],
["./licensing.html","Introduction &#62; Licensing","===============================================================================",""],
["./linkedin-notice.html","Appendix &#62; LinkedIn Notice","Fairly recently, I voluntarily stepped away from full-time work. After some time traveling and reflecting, I decided to tackle a long-held, bucket...",""],
["./linux-on-alpha-specific.html","Introduction &#62; Platform Architectures &#62; LINUX on ASA-EmulatR","Linux was ported to Alpha beginning in the 1990s and provides a more mainstream, open-source workload for Alpha hardware. It supports a wide range...",""],
["./logical-hardware-model.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Hardware - Virtualized &#62; Devices &#38; Interfaces &#62; Logical Hardware Model","Logical Model (BusInterface/DeviceManager)  All devices that require MMIO, configuration, system-level query, or interrupt support should imp...",""],
["./machine-check---hardware-error.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Exceptions, Faults, Interrupts, and MachineChecks &#62; Machine Check Handling and Machine Check Frame","A machine check is a critical processor exception raised for fatal hardware errors such as double ECC memory errors, uncorrectable bus faults, or ...",""],
["./machine_hardware-fault-level.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Exceptions, Faults, Interrupts, and MachineChecks &#62; Machine/Hardware Fault Level - Partial Support","Includes machine checks, hardware interrupts, and uncorrectable errors.",""],
["./macro-and-header-documentation.html","Appendix &#62; Macro and Header","The ASA-EmulatR relies on a set of common macros and header utilities to provide architectural alignment, bitfield handling, and exception encodin...",""],
["./macros-.html","Appendix &#62; Macro and Header &#62; Bitfield Conversion Macros in Alpha/VAX Emulation","Efficient and accurate emulation of VAX and Alpha system architectures depends on precise manipulation of complex floating-point and integer data ...",""],
["./memoriy-barrier-model.html","Appendix &#62; Class Dictionary &#62; AlphaInstructionGrain &#62; Memory Barrier Model","Alpha Architecture Memory Barrier Model The Alpha architecture implements a weak memory consistency model with explicit memory barriers. In this m...",""],
["./memory-boundaries-mmiomanager.html","Appendix &#62; Class Dictionary &#62; AlphaMemorySystem &#62; MMIOManager (MMIO) &#62; Memory Boundaries","Of the mapping implemented by MMIOManager, privileged vs. un-privileged code does not change the physical-address map.",""],
["./memory-management.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Virtual Address Space — Overview &#62; Memory Management","===============================================================================",""],
["./memory-system-_-cache-coherenc.html","Memory-System / Cache Coherency Level","Simulated via:  UnifiedDataCache (with L1/L2/L3 modeled). TLB (Translation Lookaside Buffer) — TLBSystem. Cache coherence &#38; invalidation ...",""],
["./milestones-instruduction.html","Introduction &#62; Major Milestones","The ASA-EMulatR project has progressed through several key milestones. Each stage represented both a technical achievement and a deepening of unde...",""],
["./mmiomanager-claude.html","Appendix &#62; Class Dictionary &#62; AlphaMemorySystem &#62; MMIOManager (MMIO)","Component Responsibilities  Handles memory-mapped I/O regions Routes memory accesses to appropriate device handlers No knowledge of virtual a...",""],
["./m_psr-claude.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Virtual Address Space — Overview &#62; Architecture Registers &#62; Process Status Register-PSR","Project References:  AlphaCPU::m_psr  m_psr Processor Status Register Internal CPU state Mode, MMU, FP flags, IPL, AST     Bit...",""],
["./overview-exceptionsinterruptsmachinechecks.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Exceptions, Faults, Interrupts, and MachineChecks &#62; Overview","This section describes the unified exception handling model in the ASA-EMulatR. All exceptions—arithmetic, floating-point, privilege, memory, and ...",""],
["./page-1.html","Page 1","# Alpha System Architecture: Exceptions, Interrupts &#38; Machine Checks Implementation Guide",""],
["./page-2.html","Page 2","# Alpha System Architecture: Exceptions, Interrupts &#38; Machine Checks Implementation Guide",""],
["./page-3.html","Page 3","# Alpha System Architecture: Exceptions, Interrupts &#38; Machine Checks Implementation Guide",""],
["./page-4.html","Page 4","# Alpha System Architecture: Exceptions, Interrupts &#38; Machine Checks Implementation Guide",""],
["./page-5.html","Page 5","# Alpha System Architecture: Exceptions, Interrupts &#38; Machine Checks Implementation Guide",""],
["./page-6.html","Page 6","# Alpha System Architecture: Exceptions, Interrupts &#38; Machine Checks Implementation Guide",""],
["./page-7.html","Page 7","### Exception-Specific Implementation Details  #### Memory Management Exceptions  **TLB_MISS vs PTE_TLB_MISS** ```cpp void AlphaMemorySy...",""],
["./page-8.html","Page 8","### Exception-Specific Implementation Details  #### Memory Management Exceptions  **TLB_MISS vs PTE_TLB_MISS** ```cpp void AlphaMemorySy...",""],
["./page-table-alphamemorysystem.html","Appendix &#62; Class Dictionary &#62; AlphaMemorySystem &#62; Implementation &#62; Page Table ","# AlphaMemorySystem: Page Table and PAL Instruction Interface",""],
["./page-table-entries.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Virtual Address Space — Overview &#62; Memory Management &#62; Page Table Support &#62; Invalidation  &#62; Page Table Entries","Considerations:  SMP Implementations partition the TLB by CPU id - the processor identification number.   Function TLB Entry Type Argume...",""],
["./page-table-support.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Virtual Address Space — Overview &#62; Memory Management &#62; Page Table Support","Page Table Interface Documentation for Alpha Emulator",""],
["./palcode--priviledged-model-lev.html","PALCode &#38; Priviledged Model Level","PAL (Privileged Architecture Library) and supervisor/privileged mode functionality.",""],
["./pcidevice-virtualhardware.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Hardware - Virtualized &#62; Devices &#38; Interfaces &#62; Physical Hardware Model &#62; PCIDevice","Enter topic text here.",""],
["./pipelines-alphacpu.html","Appendix &#62; Class Dictionary &#62; AlphaCPU &#62; PipeLines","Pipeline Coordination  Forward Flow: Fetch → Decode → Execute → Writeback Stall Signals: Backward propagation when resources unavailable Flus...",""],
["./platform-architecture-endianes.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Platform Architecture-Endianess","Alpha processors are little-endian by default. The Alpha AXP architecture specification defines little-endian as the native byte ordering, though ...",""],
["./platform-architectures.html","Introduction &#62; Platform Architectures","Enter topic text here.",""],
["./power-commands-srmconsole.html","Appendix &#62; SRM Console Commands &#62; Commands &#62; Power","Removes power from all hard partitions. To prevent catastrophic errors, shut down the operating system before using this command.",""],
["./priority-candidates.html","Appendix &#62; Class Dictionary &#62; AlphaInstructionGrain &#62; Priority Candidates","✅ Tier 1: Top-priority candidates for JIT (high frequency, minimal side effects)",""],
["./processor-exceptions-claude.html","Appendix &#62; Class Dictionary &#62; AlphaCPU &#62; Processor Exceptions","Reference  AlphaCPU::QBitArray m_excSum = QBitArray(64, false);  // 64-bit trap summary vector  Bit Name Meaning 0 SWC Software Com...",""],
["./processor-status-register-(ps).html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Alpha AXP Register Architecture (Modernized for Unified/128-bit Emulator Design) &#62; Processor Status Register (PS) — Overview","The Processor Status Register (PS) is a central architectural register on Alpha AXP systems, controlling processor mode, interrupt priority, float...",""],
["./q-logic-emulatedhardware.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Hardware - Virtualized &#62; Q-Logic","1. QLogic families that ship in Alpha platforms (1995 – 2003)",""],
["./qualifiers-instruction.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Instruction Grains &#62; Alpha AXP Instruction Qualifier Suffixes","Qualifier Meaning: Typical Usage: /M – Masked Exception All exceptions are masked.Status flags (overflow, underflow, inexact, invalid, reserved op...",""],
["./ready-to-use-configuration.html","Introduction &#62; System Configuration &#62; Ready-To-Use Configuration","; ===============================================================================",""],
["./reserved-operand-check.html","Appendix &#62; Macro and Header &#62; Exception Source BitMask Macros &#62; ALPHA_FP_RESERVED_OPERAND_CHECK - Reserved Operand Check","Typical Macro Usage for Reserved Operand/NaN Checks",""],
["./safememory-class-dictionary.html","Appendix &#62; Class Dictionary &#62; SafeMemory","�� Overview ----------- `SafeMemory` is the core abstraction of **physical RAM** in the ASA Alpha Emulator.   It provides a simple, thread-sa...",""],
["./safememory-claude.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Virtual Address Space — Overview &#62; Memory Management &#62; SafeMemory - TODO","Alpha/VAX Floating-Point Exception Handling: Status and Trap Model Reference",""],
["./safememory-subsystem.html","Introduction &#62; Subsystems/Components API &#62; SafeMemory","The SafeMemory subsystem provides a thread-safe, SMP- and cache-aware implementation of physical RAM for the Alpha AXP/VAX emulator. It manages al...",""],
["./savedcontext-classdictionary.html","Appendix &#62; Class Dictionary &#62; SavedContext","Enter topic text here.",""],
["./savedcontext.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Exceptions, Faults, Interrupts, and MachineChecks &#62; SavedContext- Processor State Snapshot","The SavedContext structure provides a canonical, architecture-compliant snapshot of the entire processor context for use during process context sw...",""],
["./scsi-device-integration.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Hardware - Virtualized &#62; Devices &#38; Interfaces &#62; SCSI Device Integration","Key Design Principles for SCSI Device Emulation 1. Hierarchical Architecture  Base SCSIDevice class - Handles common SCSI commands (INQUIRY, ...",""],
["./second-topic.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Hardware - Virtualized &#62; Interfaces","Interfaces Purpose AlphaSMPManager → AlphaCPU Creates, initializes, manages CPUs AlphaCPU → AlphaMemorySystem Fetch/store instructions and data Al...",""],
["./set-envar-commands-srmconsole.html","Appendix &#62; SRM Console Commands &#62; Commands &#62; Set envar","Sets or modifies the value of an environment variable.",""],
["./show-config-commands-srmconsole.html","Appendix &#62; SRM Console Commands &#62; Commands &#62; Show Config","Displays the configuration seen at the last system initialization.",""],
["./show-cpu-commands-srmconsole.html","Appendix &#62; SRM Console Commands &#62; Commands &#62; Show CPU","Displays processor information.  Syntax sh[ow] cpu [dev_name]  Options None  Argument None  Example P00&#62;&#62;&#62;show cpu CP...",""],
["./show-device-commands-srmconsole.html","Appendix &#62; SRM Console Commands &#62; Commands &#62; Show Device","Displays information for devices on the system.  Syntax sh[ow] dev[ice] [dev_name]  Options None  Argument dev_name  Any adapt...",""],
["./show-envar-commands-srmconsole.html","Appendix &#62; SRM Console Commands &#62; Commands &#62; Show envar","Displays the current state of the specified environment variable.",""],
["./show-pal-commands-srmconsole.html","Appendix &#62; SRM Console Commands &#62; Commands &#62; Show Pal","Displays the versions of Tru64 UNIX and OpenVMS PALcode.",""],
["./signals---glossary.html","Appendix &#62; Signals - Glossary","Signal Used In Usage ReservedInstruction   signalAttachDebugger(int cpuId)  External debug integration signalDumpTrace(cpuId)  To e...",""],
["./srm-console-commands.html","Appendix &#62; SRM Console Commands","The Alpha SRM console maintains various environment variables which configure the ASA-EMulatR virtual hardware.   The environment variables a...",""],
["./stack---level-2-(3_4)-support-.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Hardware - Virtualized &#62; Tulip DC21040 &#62; Stack - Level 2 (3/4) Support ","TulipNIC implements only the L2/MAC and PHY (via MMIO CSRs, DMA, MII).",""],
["./stack-cpu-interface.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Hardware - Virtualized &#62; Tulip DC21040 &#62; Stack CPU Interface","┌─────────────┐                ┌───────────────────────┐",""],
["./stackmanager-classdictionary.html","Appendix &#62; Class Dictionary &#62; StackManager","�� Overview ----------- `StackManager` is responsible for managing the **exception stack frames**  in the ASA Alpha Emulator.   It maint...",""],
["./startup-claude-alphacpu.html","Appendix &#62; Class Dictionary &#62; AlphaCPU &#62; Startup","Alpha Boot Model (Real Hardware Behavior) �� Single-CPU Boot At reset, CPU 0 starts at the PALcode base address (typically 0x21000000). Loads SRM/...",""],
["./storage-subsystem.html","Introduction &#62; Subsystems/Components API &#62; Storage Subsystem","The Storage subsystem provides abstraction for backing devices and storage interfaces. It acts as a foundation for disk, tape, and ISO devices, en...",""],
["./subsystem_component-api.html","Introduction &#62; Subsystems/Components API","The ASA-EMulatR is organized as a collection of cooperating components and subsystems. Each major part of the emulator is responsible for modeling...",""],
["./symmetric-multi-processing.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Symmetric Multi-Processing","OVERVIEW  Symmetric Multi-Processing (SMP) is the architectural model where multiple processors share a single, coherent memory and I/O space...",""],
["./system-configuration.html","Introduction &#62; System Configuration","Configuration Guide Configuration Template Markup  Ready-To-Use Configuration",""],
["./systembus.html","Appendix &#62; Class Dictionary &#62; SystemBus","The SystemBus in a software representation of the Alpha hardware address map — similar to how a hardware memory bus connects CPUs and peripheral s...",""],
["./table-of-alpha-instructions.html","Appendix &#62; Class Dictionary &#62; AlphaInstructionGrain &#62; Table of Alpha Instructions","Section,Mnemonic,Opcode (hex),Function (hex),Class,Operands,Description,Implementation Status Integer,",""],
["./table_of_definitions.html","Appendix &#62; Table of Definitons","Expression Definition Low-Order Address Bits and Length-of-Access Information When the Alpha documentation mentions \"sufficient low-order add...",""],
["./threadsafety-locksafety.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Hardware - Virtualized &#62; Devices &#38; Interfaces &#62; SCSI Device Integration &#62; ThreadSafety-LockSafety","The SCSI implementation I showed has several threading considerations and limitations that need to be addressed for proper QThread support:",""],
["./tlb-and-pte-invalidation.html","Appendix &#62; Class Dictionary &#62; TLB and PTE Bit-Shift Consistency &#62; TLB and PTE Invalidation","TLB and PTE entries are hashed and retrieved via a  (Key:Value) pair Property structure. ",""],
["./tlbentry-class-dictionary.html","Appendix &#62; Class Dictionary &#62; TLBEntry","Your TLBEntry class is a robust, canonical, and architecture-compliant Alpha AXP TLB/PTE entry for emulation or simulation. It reflects all the ke...",""],
["./tlbentry-superpages.html","Appendix &#62; Class Dictionary &#62; TLB and PTE Bit-Shift Consistency","All TLB and PTE lookups, as well as insert and invalidate operations, must use the page shift (bit shift) associated with each entry. This ensures...",""],
["./tlbexception-class-dictionary.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Exceptions, Faults, Interrupts, and MachineChecks &#62; TLB Exception Handling in the ASA Emulator","Translation Lookaside Buffer (TLB) exceptions occur when the processor attempts to translate a virtual address that is either not present in the T...",""],
["./tlbsystem-class-dictionary.html","Appendix &#62; Class Dictionary &#62; TLBSystem - Translation Buffer Table (TLB)","The TLB is a cache used by the Memory Management Unit (MMU) to speed up virtual-to-physical address translation. In Alpha processors, TLB operatio...",""],
["./tools--references.html","Appendix &#62; Tools &#38; References","UML : https://www.planttext.com/",""],
["./tracemanager-classdictionary.html","Appendix &#62; Class Dictionary &#62; TraceManager","TraceManager::instance().setLogLevel(TraceManager::DEBUG);",""],
["./tracing-claude).html","Appendix &#62; Class Dictionary &#62; TraceManager &#62; Tracing","Value Meaning 0 No trace output (silent run) 1 Basic info only (startup, halt) 2 Full CPU instructions and memory accesses 3+ Super detailed (pipe...",""],
["./translation-buffer-(tlb)-alphasystemmemory.html","Appendix &#62; Class Dictionary &#62; TLBSystem - Translation Buffer Table (TLB) &#62; Translation Buffer (TLB)","Code Interface:   AlphaMemorySystem for page table walks:  Example: to be provided   Prefetch Depth Configuration: 1. Default Value...",""],
["./translation-lookaside-buffer-(.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Virtual Address Space — Overview &#62; Memory Management &#62; Caching &#62; Translation Lookaside Buffer (TLB)","A Translation Lookaside Buffer (TLB) is a small, fast hardware cache that holds a subset of the processor’s page‐table entries—i.e. recently used ...",""],
["./trap-handling-alphacpu.html","Appendix &#62; Class Dictionary &#62; AlphaCPU &#62; Trap Handling","Enter topic text here.",""],
["./trapping-exceptions.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Exceptions, Faults, Interrupts, and MachineChecks &#62; Exception Source Bitmask","Purpose and Implementation in Alpha AXP Emulation  Overview  The Alpha AXP architecture, like many RISC designs, can trigger floating-po...",""],
["./tru64-unix-on-alpha-specific.html","Introduction &#62; Platform Architectures &#62; Tru64 Unix on ASA-EmulatR","Tru64 UNIX (formerly Digital UNIX) is a 64-bit UNIX operating system specifically tuned for Alpha platforms. It leverages Alpha SMP, memory manage...",""],
["./tulip-dc21040.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Hardware - Virtualized &#62; Tulip DC21040","1 QLogic families that ship in Alpha platforms (1995 – 2003)",""],
["./unifieddatacache-objectlibrary.html","Appendix &#62; Class Dictionary &#62; UnifiedDataCache","Provides integral support for the L1 I-Cache, L2 D-Cache, L3 Shared (SMP) UnifiedCache, AlphaInstructionCache",""],
["./unit-test.html","Unit Testing","Component Description / Status of Unit Test Completion",""],
["./utility-macros.html","Appendix &#62; Macro and Header &#62; Alignment Check Macros in Emulator Development","Many computer architectures—including VAX, Alpha, and modern x86—require certain data types to be accessed on addresses aligned to their natural s...",""],
["./vax---specific.html","Introduction &#62; Platform Architectures &#62; VAX on ASA-EmulatR","The VAX architecture predates Alpha and defines a 32-bit CISC platform with significant differences from the Alpha AXP RISC design. The ASA-Emulat...",""],
["./vax-architecture.html","Introduction &#62; Platform Architectures &#62; VAX on ASA-EmulatR &#62; VAX Architecture — Exceptions, Interrupts, and Machine Checks","This section provides an overview of the VAX exception and interrupt handling model, as well as the architecture’s approach to machine checks and ...",""],
["./vaxmacroandheader.html","Introduction &#62; Platform Architectures &#62; VAX on ASA-EmulatR &#62; Conversion Macros","Enter topic text here.",""],
["./vax_g_to_f_float.html","Introduction &#62; Platform Architectures &#62; VAX on ASA-EmulatR &#62; Conversion Macros &#62; VAX_G_TO_F_FLOAT - Converts a 64-bit VAX G_floating value to a 64-bit VAX D_floating","Converts a 64-bit VAX G_floating value to a 32-bit VAX F_floating value.",""],
["./vax_g_to_f_float_2.html","Introduction &#62; Platform Architectures &#62; VAX on ASA-EmulatR &#62; Conversion Macros &#62; VAX_D_TO_G_FLOAT - Convert VAX D_Float to 64-bit VAX G_Float","Converts a 64-bit VAX D_floating value to a 64-bit VAX G_floating value.",""],
["./vax_g_to_f_float_3.html","Introduction &#62; Platform Architectures &#62; VAX on ASA-EmulatR &#62; Conversion Macros &#62; VAX_LWORD_TO_QWORD","Enter topic text here.",""],
["./vax_g_to_f_float_4.html","Introduction &#62; Platform Architectures &#62; VAX on ASA-EmulatR &#62; Conversion Macros &#62; VAX_LONG_TO_QWORD","/*  * Macro: VAX_LONG_TO_QWORD  * Converts 32-bit signed longword to 64-bit quadword integer.  * Pure sign-extension.  */",""],
["./vax_g_to_qword---convert-vax-g.html","Introduction &#62; Platform Architectures &#62; VAX on ASA-EmulatR &#62; Conversion Macros &#62; VAX_G_TO_QWORD - Convert VAX G_Float to 64-bit signed integer","Convert VAX G_Float to 64-bit signed integer (QUADWORD).",""],
["./vax_qword_to_g_float.html","Introduction &#62; Platform Architectures &#62; VAX on ASA-EmulatR &#62; Conversion Macros &#62; VAX_QWORD_TO_G_FLOAT","Enter topic text here.",""],
["./virtual-barrier-support.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Virtual Address Space — Overview &#62; Memory Management &#62; Virtual Barrier Support","These are defined by virtual address ranges, influenced by mode bits, MMU settings, and page table base register contents.",""],
["./virtual-hardware.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Hardware - Virtualized &#62; Devices &#38; Interfaces &#62; Physical Hardware Model","Physical Model (QObject tree)  Cabinet, Drawer, IODrawer, IOHose, Bus, PCIDevice, etc. Model the physical and logical topology. May or may no...",""],
["./virtual-to-physical-address-tr.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Virtual Address Space — Overview &#62; Memory Management &#62; Virtual to Physical Address Translation","Topic Purpose Implementation Needed 1. Virtual Address Mapping Table Map Virtual Address (VA) ranges → Physical Address (PA) ✅ memoryMap or upgrad...",""],
["./virtualization-address-space.html","Introduction &#62; Platform Architectures &#62; Alpha on ASA-EmulatR &#62; Virtual Address Space — Overview","This section introduces the virtual address space model as implemented in the ASA-EMulatR, documenting how virtual memory, address translation, an...",""],
["./visual-studio-2022---community.html","Appendix &#62; Visual Studio 2022 - Community","Enter topic text here.",""],
["./wmb-performance.html","Appendix &#62; Class Dictionary &#62; AlphaInstructionGrain &#62; Memory Barrier Model &#62; Performance","Performance Analysis  High SC failure rate: Could indicate contention between CPUs Repeated LL/SC pairs: May indicate busy-waiting in applica...",""],
["./wwidmgr-commands-srmconsole.html","Appendix &#62; SRM Console Commands &#62; Commands &#62; wwidmgr","Manages wwid device registration on the Fibre Channel loop or fabric.",""]];
